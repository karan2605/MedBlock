{"ast":null,"code":"'use strict';\n/**\n * Make certain getters enumnerable\n *\n * This can be used to add additional getters that are enumerable and hence\n * show up on an `Object.keys()` call.\n *\n * @param {Object} object - The object it should be applied to\n * @param {Array.<String>} fields - The fields that should be made enumnerable\n */\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar addEnumerableGetters = function addEnumerableGetters(object, fields) {\n  var _iterator = _createForOfIteratorHelper(fields),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var field = _step.value;\n      var prop = void 0;\n      var proto = object; // Walk up the proottype chain until a property with the given name is\n      // found\n\n      while (prop === undefined) {\n        proto = Object.getPrototypeOf(proto);\n\n        if (proto === null) {\n          throw new Error(\"no getter named '\".concat(field, \"' found\"));\n        }\n\n        prop = Object.getOwnPropertyDescriptor(proto, field);\n      } // There is a property with the correct name, but it's not a getter\n\n\n      if (prop.get === undefined) {\n        throw new Error(\"no getter named '\".concat(field, \"' found\"));\n      }\n\n      Object.defineProperty(object, field, {\n        enumerable: true,\n        get: prop.get\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * Makes all properties with a leading underscore non-enumerable.\n *\n * @param {Object} object - The object it should be applied to\n */\n\n\nvar hidePrivateFields = function hidePrivateFields(object) {\n  for (var key in object) {\n    if (key[0] === '_') {\n      Object.defineProperty(object, key, {\n        enumerable: false\n      });\n    }\n  }\n};\n\nmodule.exports = {\n  addEnumerableGetters: addEnumerableGetters,\n  hidePrivateFields: hidePrivateFields\n};","map":null,"metadata":{},"sourceType":"script"}